<templateSet group="user">
  <template name="fdvval" value="val $name$ = findViewById&lt;$type$&gt;(R.id.$id$)" description="template for using find view and set variable" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="stclk" value="$property$.setOnClickListener($lambda$)" description="set click listener kotlin android" toReformat="false" toShortenFQNames="true">
    <variable name="property" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="lambda" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="snkbr" value="Snackbar.make($view$, $text$, Snackbar.$duration$).show()" description="Android Snackbar." toReformat="false" toShortenFQNames="true">
    <variable name="view" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="duration" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="fdv" value="findViewById&lt;$type$&gt;(R.id.$vieId$)." description="Find view and operate directly on it." toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="vieId" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="frag" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;&#10;class $className$ : Fragment() {&#10;&#10;    companion object {&#10;        fun instance(): $className$ {&#10;            return $className$()&#10;        }&#10;    }&#10;    &#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {&#10;        return inflater.inflate(R.layout.$layout$, container, false)    &#10;    }&#10;}" description="Create fragment template" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="layout" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="valEstr" value=".withValidation { $var$ -&gt;&#10;    if($var$.isEmpty()) resource(R.string.$string_res$)&#10;    else null&#10;}" description="empty string field validator" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="string_res" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="valField" value=".withValidation { $var$ -&gt;&#10;    if($condition$) resource(R.string.$string_res$)&#10;    else null&#10;}" description="fieldValdiator" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="condition" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="string_res" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="inptlayout" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&gt;&#10;            &#10;            $editText$&#10;        &#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="Text input layout" toReformat="false" toShortenFQNames="true">
    <variable name="editText" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="clickLambda" value="private val $propertyName$: (View) -&gt; Unit = { clickedView -&gt;&#10;    &#10;}" description="create lambda for a view click listener" toReformat="false" toShortenFQNames="true">
    <variable name="propertyName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="vmfact" value="class $VMClass$(val $parameter$): ViewModel() {&#10;    &#10;}&#10;&#10;class $VMClass$Factory(val $parameter$): ViewModelProvider.NewInstanceFactory() {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel?&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        return $VMClass$($parameter$) as T&#10;    }&#10;}" description="View model factory" toReformat="false" toShortenFQNames="true">
    <variable name="VMClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="parameter" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="vmfrag" value="class $FragmentClass$ : Fragment() {&#10;    &#10;    private lateinit var model: $VMClass$&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {&#10;        return inflater.inflate(R.layout.$layoutid$, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        backBarLayout.visibility = View.GONE&#10;        activity?.run { &#10;            model = ViewModelProviders.of(this, $FactoryClass$())&#10;                .get($VMClass$::class.java)&#10;        }&#10;    }&#10;}" description="Fragment with view model setup" toReformat="false" toShortenFQNames="true">
    <variable name="FragmentClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VMClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="layoutid" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FactoryClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="kwiftasks" value="tasks.create(&quot;kwiftConvertKotlinToSwift&quot;) {&#10;    this.group = &quot;build&quot;&#10;    doLast {&#10;        println(&quot;Started&quot;)&#10;        convertKotlinToSwift(&#10;            androidFolder = androidBase,&#10;            iosFolder = iosBase,&#10;            clean = true&#10;        ) {&#10;            imports = listOf(&quot;Kwift&quot;)&#10;        }&#10;        println(&quot;Finished&quot;)&#10;    }&#10;}&#10;tasks.create(&quot;kwiftCreateAndroidLayoutClasses&quot;) {&#10;    this.group = &quot;build&quot;&#10;    doLast {&#10;        println(&quot;Started&quot;)&#10;        createAndroidLayoutClasses(&#10;            androidFolder = androidBase,&#10;            applicationPackage = &quot;com.lightningkite.kwifttemplate&quot;&#10;        )&#10;        println(&quot;Finished&quot;)&#10;    }&#10;}&#10;tasks.create(&quot;kwiftConvertLayoutsToSwift&quot;) {&#10;    this.group = &quot;build&quot;&#10;    doLast {&#10;        println(&quot;Started&quot;)&#10;        convertLayoutsToSwift(&#10;            androidFolder = androidBase,&#10;            iosFolder = iosBase&#10;        )&#10;        println(&quot;Finished&quot;)&#10;    }&#10;}&#10;tasks.create(&quot;kwiftConvertResourcesToIos&quot;) {&#10;    this.group = &quot;build&quot;&#10;    doLast {&#10;        println(&quot;Started&quot;)&#10;        convertResourcesToIos(&#10;            androidFolder = androidBase,&#10;            iosFolder = iosBase&#10;        )&#10;        println(&quot;Finished&quot;)&#10;    }&#10;}&#10;tasks.create(&quot;kwiftIos&quot;) {&#10;    this.group = &quot;build&quot;&#10;    this.dependsOn(&quot;kwiftConvertKotlinToSwift&quot;)&#10;    this.dependsOn(&quot;kwiftConvertLayoutsToSwift&quot;)&#10;    this.dependsOn(&quot;kwiftConvertResourcesToIos&quot;)&#10;    this.dependsOn(&quot;kwiftCreateAndroidLayoutClasses&quot;)&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="adptr" value="class $VHClass$(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;    &#10;}&#10;&#10;class $Adapter$ : RecyclerView.Adapter&lt;$VHClass$&gt;() {&#10;   override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): $VHClass$ {&#10;       val view = LayoutInflater.from(parent.context).inflate(R.layout.$layout$, parent, false)&#10;       return $VHClass$(view)&#10;    }&#10;&#10;    override fun getItemCount(): Int {&#10;        TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates.&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: $VHClass$, position: Int) {&#10;        TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates.&#10;    }&#10;}" description="Setup a RecyclerView adapter" toReformat="false" toShortenFQNames="true">
    <variable name="VHClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Adapter" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="layout" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="dffclbk" value="class $ClassName$(val oldList: List&lt;$type$&gt;, val newList: List&lt;$type$&gt;) : DiffUtil.Callback() {&#10;    override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;        val oldItem = oldList[oldItemPosition]&#10;        val newItem = newList[newItemPosition]&#10;        //Compare old and new item here&#10;    }&#10;&#10;    override fun getOldListSize(): Int {&#10;        return oldList.size&#10;    }&#10;&#10;    override fun getNewListSize(): Int {&#10;        return newList.size&#10;    }&#10;&#10;    override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;        val oldItem = oldList[oldItemPosition]&#10;        val newItem = newList[newItemPosition]&#10;        //Compare old and new item contents&#10;    }&#10;}" description="Template for adding a DiffUtil to be used with Recycler views." toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="vg" value="class $classname$ : ViewGenerator() {&#10;    override val title: String&#10;        get() = TODO(&quot;not implemented&quot;) //To change initializer of created properties use File | Settings | File Templates.&#10;&#10;    override fun generate(dependency: ViewDependency): View {&#10;        TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates.&#10;    }&#10;}" description="View Generator Template" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="bsecvw" value="import android.content.Context&#10;import android.os.Bundle&#10;import com.taxbot.baseui.BaseContainedView&#10;import com.taxbot.baseui.ViewContainer&#10;import com.taxbot.R&#10;&#10;class $KLASS$(context: Context, container: ViewContainer, arguments: Bundle?) : BaseContainedView(context, container, arguments) {&#10;    init {&#10;            inflate(context, R.layout.$layoutRes$, this)&#10;    }&#10;}" description="Base Contained View" toReformat="false" toShortenFQNames="true">
    <variable name="KLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="layoutRes" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="khrysvg" value="class $VGClass$(val stack: ObservableStack&lt;ViewGenerator&gt;) : ViewGenerator() {&#10;&#10;    override val title: String&#10;        get() = $title$&#10;&#10;    override fun generate(dependency: ViewDependency): View {&#10;        val xml = $XMLClass$()&#10;        return xml.setup(dependency)&#10;    }&#10;}&#10;&#10;class $XMLClass$ {&#10;    fun setup(dependency: ViewDependency): View {&#10;         val view = LayoutInflater.from(dependency.context).inflate(R.layout.$layout$, null, false)&#10;         return setupView(view)&#10;    }&#10;    &#10;    fun setupView(view: View): View {&#10;        //Initialize your view here&#10;        return view&#10;    }&#10;}" description="View Generator for khrysalis" toReformat="false" toShortenFQNames="true">
    <variable name="VGClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="XMLClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="layout" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>